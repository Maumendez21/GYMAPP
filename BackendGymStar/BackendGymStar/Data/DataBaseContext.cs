// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BackendGymStar.Data
{
    public partial class DataBaseContext : DbContext
    {
        public DataBaseContext()
        {
        }

        public DataBaseContext(DbContextOptions<DataBaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Caja> Caja { get; set; }
        public virtual DbSet<Clase> Clase { get; set; }
        public virtual DbSet<ConceptoPago> ConceptoPago { get; set; }
        public virtual DbSet<DetalleCaja> DetalleCaja { get; set; }
        public virtual DbSet<DetallePago> DetallePago { get; set; }
        public virtual DbSet<Estatus> Estatus { get; set; }
        public virtual DbSet<Gimnasio> Gimnasio { get; set; }
        public virtual DbSet<Membresia> Membresia { get; set; }
        public virtual DbSet<MembresiaSocio> MembresiaSocio { get; set; }
        public virtual DbSet<Pago> Pago { get; set; }
        public virtual DbSet<Producto> Producto { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<Socio> Socio { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Caja>(entity =>
            {
                entity.Property(e => e.Cajaid).HasColumnName("CAJAID");

                entity.Property(e => e.CajafecReg)
                    .HasColumnType("datetime")
                    .HasColumnName("CAJAFecReg");

                entity.Property(e => e.CajafechaApertura)
                    .HasColumnType("datetime")
                    .HasColumnName("CAJAFechaApertura");

                entity.Property(e => e.CajafechaCierre)
                    .HasColumnType("datetime")
                    .HasColumnName("CAJAFechaCierre");

                entity.Property(e => e.CajamontoActual).HasColumnName("CAJAMontoActual");

                entity.Property(e => e.CajamontoApertura).HasColumnName("CAJAMontoApertura");

                entity.Property(e => e.CajamontoCierre).HasColumnName("CAJAMontoCierre");

                entity.Property(e => e.CajausrReg).HasColumnName("CAJAUsrReg");

                entity.HasOne(d => d.Est)
                    .WithMany(p => p.Caja)
                    .HasForeignKey(d => d.EstId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Caja_Estatus");

                entity.HasOne(d => d.Gym)
                    .WithMany(p => p.Caja)
                    .HasForeignKey(d => d.GymId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Caja_Gimnasio");
            });

            modelBuilder.Entity<Clase>(entity =>
            {
                entity.HasKey(e => e.Clasid);

                entity.Property(e => e.Clasid).HasColumnName("CLASID");

                entity.Property(e => e.Clasdescripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CLASDescripcion");

                entity.Property(e => e.ClasfecReg)
                    .HasColumnType("datetime")
                    .HasColumnName("CLASFecReg");

                entity.Property(e => e.Clasnombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLASNombre");

                entity.Property(e => e.Clasprecio).HasColumnName("CLASPrecio");

                entity.Property(e => e.ClasusrReg).HasColumnName("CLASUsrReg");

                entity.HasOne(d => d.Est)
                    .WithMany(p => p.Clase)
                    .HasForeignKey(d => d.EstId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clase_Estatus");

                entity.HasOne(d => d.Gym)
                    .WithMany(p => p.Clase)
                    .HasForeignKey(d => d.GymId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clase_Gimnasio");
            });

            modelBuilder.Entity<ConceptoPago>(entity =>
            {
                entity.HasKey(e => e.Concepid);

                entity.Property(e => e.Concepid).HasColumnName("CONCEPID");

                entity.Property(e => e.Concepdescripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONCEPDescripcion");

                entity.Property(e => e.Concepnombre)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("CONCEPNombre");
            });

            modelBuilder.Entity<DetalleCaja>(entity =>
            {
                entity.HasKey(e => e.Detcajaid);

                entity.Property(e => e.Detcajaid).HasColumnName("DETCAJAID");

                entity.HasOne(d => d.Caja)
                    .WithMany(p => p.DetalleCaja)
                    .HasForeignKey(d => d.CajaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DetalleCaja_Caja");

                entity.HasOne(d => d.Pago)
                    .WithMany(p => p.DetalleCaja)
                    .HasForeignKey(d => d.PagoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DetalleCaja_Pago");
            });

            modelBuilder.Entity<DetallePago>(entity =>
            {
                entity.HasKey(e => e.Detpagoid);

                entity.Property(e => e.Detpagoid).HasColumnName("DETPAGOID");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Pago)
                    .WithMany(p => p.DetallePago)
                    .HasForeignKey(d => d.PagoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DetallePago_Pago");
            });

            modelBuilder.Entity<Estatus>(entity =>
            {
                entity.HasKey(e => e.Estid);

                entity.Property(e => e.Estid).HasColumnName("ESTID");

                entity.Property(e => e.Estcategoria)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ESTCategoria");

                entity.Property(e => e.Estclave)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ESTClave");

                entity.Property(e => e.Estdescripcion)
                    .IsRequired()
                    .HasMaxLength(80)
                    .HasColumnName("ESTDescripcion")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Gimnasio>(entity =>
            {
                entity.HasKey(e => e.Gymid);

                entity.Property(e => e.Gymid).HasColumnName("GYMID");

                entity.Property(e => e.Gymactivo).HasColumnName("GYMActivo");

                entity.Property(e => e.Gymdireccion)
                    .IsRequired()
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("GYMDireccion");

                entity.Property(e => e.Gymemail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GYMEmail");

                entity.Property(e => e.GymfecReg)
                    .HasColumnType("datetime")
                    .HasColumnName("GYMFecReg");

                entity.Property(e => e.Gymlogo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GYMLogo");

                entity.Property(e => e.Gymnombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GYMNombre");

                entity.Property(e => e.GymsitioWeb)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GYMSitioWeb");

                entity.Property(e => e.Gymtelefono)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("GYMTelefono");

                entity.HasOne(d => d.Est)
                    .WithMany(p => p.Gimnasio)
                    .HasForeignKey(d => d.EstId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gimnasio_Estatus");
            });

            modelBuilder.Entity<Membresia>(entity =>
            {
                entity.HasKey(e => e.Memid);

                entity.Property(e => e.Memid).HasColumnName("MEMID");

                entity.Property(e => e.Memactivo).HasColumnName("MEMActivo");

                entity.Property(e => e.Memdescripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MEMDescripcion");

                entity.Property(e => e.Memduracion).HasColumnName("MEMDuracion");

                entity.Property(e => e.MemfecReg)
                    .HasColumnType("datetime")
                    .HasColumnName("MEMFecReg");

                entity.Property(e => e.Memnombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MEMNombre");

                entity.Property(e => e.Mempersonas).HasColumnName("MEMPersonas");

                entity.Property(e => e.Memprecio).HasColumnName("MEMPrecio");

                entity.Property(e => e.MemusrReg).HasColumnName("MEMUsrReg");

                entity.HasOne(d => d.Est)
                    .WithMany(p => p.Membresia)
                    .HasForeignKey(d => d.EstId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Membresia_Estatus");

                entity.HasOne(d => d.Gym)
                    .WithMany(p => p.Membresia)
                    .HasForeignKey(d => d.GymId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Membresia_Gimnasio");
            });

            modelBuilder.Entity<MembresiaSocio>(entity =>
            {
                entity.HasKey(e => e.Memsocid)
                    .HasName("PK_MembresiaCliente");

                entity.Property(e => e.Memsocid).HasColumnName("MEMSOCID");

                entity.Property(e => e.FechaInicio).HasColumnType("datetime");

                entity.Property(e => e.FechaPago).HasColumnType("datetime");

                entity.Property(e => e.FechaRegistro).HasColumnType("datetime");

                entity.HasOne(d => d.Est)
                    .WithMany(p => p.MembresiaSocio)
                    .HasForeignKey(d => d.EstId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MembresiaCliente_Estatus");

                entity.HasOne(d => d.Membresia)
                    .WithMany(p => p.MembresiaSocio)
                    .HasForeignKey(d => d.MembresiaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MembresiaCliente_Membresia");
            });

            modelBuilder.Entity<Pago>(entity =>
            {
                entity.Property(e => e.Pagoid).HasColumnName("PAGOID");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FechaPago).HasColumnType("date");

                entity.Property(e => e.Referencia)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Concepto)
                    .WithMany(p => p.Pago)
                    .HasForeignKey(d => d.ConceptoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pago_ConceptoPago");

                entity.HasOne(d => d.Gym)
                    .WithMany(p => p.Pago)
                    .HasForeignKey(d => d.Gymid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pago_Gimnasio");
            });

            modelBuilder.Entity<Producto>(entity =>
            {
                entity.HasKey(e => e.Prodid);

                entity.Property(e => e.Prodid).HasColumnName("PRODID");

                entity.Property(e => e.ProdcodBarras)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODCodBarras");

                entity.Property(e => e.Proddetalles)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PRODDetalles");

                entity.Property(e => e.ProdfecActu)
                    .HasColumnType("datetime")
                    .HasColumnName("PRODFecActu");

                entity.Property(e => e.Prodfoto)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODFoto");

                entity.Property(e => e.Prodnombre)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODNombre");

                entity.Property(e => e.Prodprecio).HasColumnName("PRODPrecio");

                entity.Property(e => e.Prodstock).HasColumnName("PRODStock");

                entity.Property(e => e.ProdusrActu)
                    .HasColumnType("datetime")
                    .HasColumnName("PRODUsrActu");

                entity.HasOne(d => d.Est)
                    .WithMany(p => p.Producto)
                    .HasForeignKey(d => d.EstId)
                    .HasConstraintName("FK_Producto_Estatus");

                entity.HasOne(d => d.Gym)
                    .WithMany(p => p.Producto)
                    .HasForeignKey(d => d.GymId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Producto_Gimnasio");
            });

            modelBuilder.Entity<Rol>(entity =>
            {
                entity.ToTable("ROL");

                entity.Property(e => e.Rolid).HasColumnName("ROLID");

                entity.Property(e => e.Rolclave)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ROLClave");

                entity.Property(e => e.Rolnombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROLNombre");
            });

            modelBuilder.Entity<Socio>(entity =>
            {
                entity.HasKey(e => e.Socid)
                    .HasName("PK_Cliente");

                entity.Property(e => e.Socid).HasColumnName("SOCID");

                entity.Property(e => e.Usrid).HasColumnName("USRId");

                entity.HasOne(d => d.MemSoc)
                    .WithMany(p => p.Socio)
                    .HasForeignKey(d => d.MemSocid)
                    .HasConstraintName("FK_Socio_MembresiaSocio");

                entity.HasOne(d => d.Usr)
                    .WithMany(p => p.Socio)
                    .HasForeignKey(d => d.Usrid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Socio_Usuario");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.HasKey(e => e.Usrid);

                entity.Property(e => e.Usrid).HasColumnName("USRID");

                entity.Property(e => e.Usractivo).HasColumnName("USRActivo");

                entity.Property(e => e.Usrapm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USRApm");

                entity.Property(e => e.Usrapp)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USRApp");

                entity.Property(e => e.Usremail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USREmail");

                entity.Property(e => e.UsrfecReg)
                    .HasColumnType("datetime")
                    .HasColumnName("USRFecReg");

                entity.Property(e => e.Usrhuella)
                    .HasMaxLength(100)
                    .HasColumnName("USRHuella")
                    .IsFixedLength();

                entity.Property(e => e.Usrimagen)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USRImagen");

                entity.Property(e => e.Usrnombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USRNombre");

                entity.Property(e => e.Usrpassword)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("USRPassword");

                entity.Property(e => e.Usrtelefono)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("USRTelefono");

                entity.HasOne(d => d.Est)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.EstId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuario_Estatus");

                entity.HasOne(d => d.Gym)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.GymId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuario_Gimnasio");

                entity.HasOne(d => d.Rol)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.RolId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuario_Rol");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}